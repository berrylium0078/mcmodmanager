"""
Unit tests for Maven Version String Library

Tests based on the examples and specifications from:
https://maven.apache.org/pom.html

Generated by Claude Sonnet 4.5
"""

import unittest
from src.lib.version import MavenVersion, VersionRange, VersionSegment


class TestMavenVersion(unittest.TestCase):
    """Test cases for MavenVersion class"""

    def test_basic_version_parsing(self):
        """Test basic version string parsing"""
        v1 = MavenVersion("1.0")
        v2 = MavenVersion("2.0")
        self.assertTrue(v1 < v2)
        self.assertTrue(v2 > v1)

    def test_version_equality(self):
        """Test version equality"""
        v1 = MavenVersion("1.0")
        v2 = MavenVersion("1.0")
        self.assertEqual(v1, v2)

    def test_trailing_zeros_trimmed(self):
        """Test that trailing zeros are trimmed: 1.0.0 -> 1"""
        v1 = MavenVersion("1.0.0")
        v2 = MavenVersion("1")
        self.assertEqual(v1, v2)

    def test_trailing_qualifiers_trimmed(self):
        """Test that trailing null qualifiers are trimmed"""
        # 1.ga = 1-ga = 1-0 = 1.0 = 1
        versions = ["1.ga", "1-ga", "1-0", "1.0", "1"]
        for i, v1_str in enumerate(versions):
            for v2_str in versions[i:]:
                with self.subTest(v1=v1_str, v2=v2_str):
                    v1 = MavenVersion(v1_str)
                    v2 = MavenVersion(v2_str)
                    self.assertEqual(v1, v2, f"{v1_str} should equal {v2_str}")

    def test_version_with_final(self):
        """Test that 'final' is treated as null"""
        v1 = MavenVersion("1.final")
        v2 = MavenVersion("1")
        self.assertEqual(v1, v2)

    def test_version_with_release(self):
        """Test that 'release' is treated as null"""
        v1 = MavenVersion("1.release")
        v2 = MavenVersion("1")
        self.assertEqual(v1, v2)

    def test_number_padding(self):
        """Test: 1 < 1.1 (number padding)"""
        v1 = MavenVersion("1")
        v2 = MavenVersion("1.1")
        self.assertTrue(v1 < v2)

    def test_qualifier_padding(self):
        """Test: 1-snapshot < 1 < 1-sp (qualifier padding)"""
        v1 = MavenVersion("1-snapshot")
        v2 = MavenVersion("1")
        v3 = MavenVersion("1-sp")
        self.assertTrue(v1 < v2)
        self.assertTrue(v2 < v3)

    def test_numeric_switching(self):
        """Test: 1-foo2 < 1-foo10 (numeric order)"""
        v1 = MavenVersion("1-foo2")
        v2 = MavenVersion("1-foo10")
        self.assertTrue(v1 < v2)

    def test_separator_equivalence(self):
        """Test: 1.foo = 1-foo < 1-1 < 1.1"""
        v1 = MavenVersion("1.foo")
        v2 = MavenVersion("1-foo")
        v3 = MavenVersion("1-1")
        v4 = MavenVersion("1.1")

        self.assertEqual(v1, v2)
        self.assertTrue(v2 < v3)
        self.assertTrue(v3 < v4)

    def test_sp_qualifier(self):
        """Test: 1-sp > 1-ga"""
        v1 = MavenVersion("1-sp")
        v2 = MavenVersion("1-ga")
        self.assertTrue(v1 > v2)

    def test_sp_with_version(self):
        """Test: 1-sp.1 > 1-ga.1"""
        v1 = MavenVersion("1-sp.1")
        v2 = MavenVersion("1-ga.1")
        self.assertTrue(v1 > v2)

    def test_alpha_shorthand(self):
        """Test: 1-a1 = 1-alpha-1"""
        v1 = MavenVersion("1-a1")
        v2 = MavenVersion("1-alpha-1")
        self.assertEqual(v1, v2)

    def test_case_insensitivity(self):
        """Test: 1.0-alpha1 = 1.0-ALPHA1 (case insensitivity)"""
        v1 = MavenVersion("1.0-alpha1")
        v2 = MavenVersion("1.0-ALPHA1")
        self.assertEqual(v1, v2)

    def test_letter_vs_number(self):
        """Test: 1.7 > 1.K (numbers come after letters in same position)"""
        # Actually, numbers come AFTER letters with same separator
        # But different separators: .number > -letter
        v1 = MavenVersion("1.7")
        v2 = MavenVersion("1.K")
        # 1.7 has tokens [(., 1), (., 7)]
        # 1.K has tokens [(., 1), (., k)]
        # At position 1: 7 (int) vs "k" (str)
        # Numbers come after qualifiers: 7 > k
        self.assertTrue(v1 > v2)

    def test_alphabetic_ordering(self):
        """Test: 5.zebra > 5.aardvark"""
        v1 = MavenVersion("5.zebra")
        v2 = MavenVersion("5.aardvark")
        self.assertTrue(v1 > v2)

    def test_non_ascii_alpha(self):
        """Test: 1.α > 1.b (Greek letter alpha)"""
        v1 = MavenVersion("1.α")
        v2 = MavenVersion("1.b")
        # Greek alpha (α) is not a special qualifier
        # It's compared lexicographically with "b"
        # In Unicode, α (U+03B1) > b (U+0062)
        self.assertTrue(v1 > v2)

    def test_qualifier_order(self):
        """Test the full qualifier ordering"""
        versions = [
            "1-alpha",
            "1-a1",
            "1-beta",
            "1-b1",
            "1-milestone",
            "1-m1",
            "1-rc",
            "1-cr",
            "1-snapshot",
            "1",
            "1-final",
            "1-ga",
            "1-release",
            "1-sp"
        ]

        for i in range(len(versions) - 1):
            with self.subTest(v1=versions[i], v2=versions[i + 1]):
                v1 = MavenVersion(versions[i])
                v2 = MavenVersion(versions[i + 1])
                self.assertTrue(v1 <= v2, f"{versions[i]} should be < {versions[i + 1]}")

    def test_complex_version_comparison(self):
        """Test complex version strings"""
        v1 = MavenVersion("2.0.0-M1")
        v2 = MavenVersion("2.0.0")
        self.assertTrue(v1 < v2)

    def test_snapshot_vs_release(self):
        """Test that snapshots come before releases"""
        v1 = MavenVersion("1.0-SNAPSHOT")
        v2 = MavenVersion("1.0")
        self.assertTrue(v1 < v2)

    def test_version_range_example(self):
        """Test version range example from spec: [1.0,2.0) excludes 2.0 but includes 2.0-rc1"""
        # This tests that 2.0-rc1 < 2.0
        v1 = MavenVersion("2.0-rc1")
        v2 = MavenVersion("2.0")
        self.assertTrue(v1 < v2)

    def test_hash_consistency(self):
        """Test that equal versions have the same hash"""
        v1 = MavenVersion("1.0.0")
        v2 = MavenVersion("1")
        self.assertEqual(v1, v2)
        self.assertEqual(hash(v1), hash(v2))

    def test_string_representation(self):
        """Test string representation"""
        v = MavenVersion("1.2.3-beta")
        self.assertEqual(str(v), "1.2.3-beta")
        self.assertEqual(repr(v), "MavenVersion('1.2.3-beta')")

class TestVersionRange(unittest.TestCase):
    """Test cases for VersionRange class"""

    def test_soft_requirement(self):
        """Test soft requirement: 1.0"""
        vr = VersionRange("1.0")
        self.assertTrue(vr.soft)
        self.assertTrue(vr.contains("1.0"))
        self.assertTrue(vr.contains("2.0"))  # Soft requirements are satisfied by any version

    def test_exact_version(self):
        """Test hard requirement for exact version: [1.0]"""
        vr = VersionRange("[1.0]")
        self.assertFalse(vr.soft)
        self.assertTrue(vr.contains("1.0"))
        self.assertFalse(vr.contains("1.1"))
        self.assertFalse(vr.contains("0.9"))

    def test_upper_bound_inclusive(self):
        """Test upper bound inclusive: (,1.0]"""
        vr = VersionRange("(,1.0]")
        self.assertTrue(vr.contains("0.5"))
        self.assertTrue(vr.contains("1.0"))
        self.assertFalse(vr.contains("1.1"))

    def test_range_inclusive(self):
        """Test inclusive range: [1.2,1.3]"""
        vr = VersionRange("[1.2,1.3]")
        self.assertFalse(vr.contains("1.1"))
        self.assertTrue(vr.contains("1.2"))
        self.assertFalse(vr.contains("1.25"))
        self.assertTrue(vr.contains("1.3"))
        self.assertFalse(vr.contains("1.4"))

    def test_range_exclusive_upper(self):
        """Test range with exclusive upper bound: [1.0,2.0)"""
        vr = VersionRange("[1.0,2.0)")
        self.assertFalse(vr.contains("0.9"))
        self.assertTrue(vr.contains("1.0"))
        self.assertTrue(vr.contains("1.5"))
        self.assertFalse(vr.contains("2.0"))
        self.assertFalse(vr.contains("2.1"))

    def test_range_open_upper(self):
        """Test open upper bound: [1.5,)"""
        vr = VersionRange("[1.5,)")
        self.assertFalse(vr.contains("1.4"))
        self.assertTrue(vr.contains("1.5"))
        self.assertTrue(vr.contains("2.0"))
        self.assertTrue(vr.contains("100.0"))

    def test_multiple_ranges(self):
        """Test multiple ranges: (,1.0],[1.2,)"""
        vr = VersionRange("(,1.0],[1.2,)")
        self.assertTrue(vr.contains("0.5"))
        self.assertTrue(vr.contains("1.0"))
        self.assertFalse(vr.contains("1.1"))
        self.assertTrue(vr.contains("1.2"))
        self.assertTrue(vr.contains("2.0"))

    def test_exclude_specific_version(self):
        """Test excluding specific version: (,1.1),(1.1,)"""
        vr = VersionRange("(,1.1),(1.1,)")
        self.assertTrue(vr.contains("1.0"))
        self.assertFalse(vr.contains("1.1"))
        self.assertTrue(vr.contains("1.2"))

    def test_range_with_rc(self):
        """Test that [1.0,2.0) excludes 2.0 but includes 2.0-rc1"""
        vr = VersionRange("[1.0,2.0)")
        self.assertTrue(vr.contains("1.0"))
        self.assertTrue(vr.contains("2.0-rc1"))
        self.assertFalse(vr.contains("2.0"))

    def test_version_range_string_representation(self):
        """Test string representation of version range"""
        vr = VersionRange("[1.0,2.0)")
        self.assertEqual(str(vr), "[1.0,2.0)")
        self.assertEqual(repr(vr), "VersionRange('[1.0,2.0)')")

    def test_invalid_range_empty(self):
        """Test that empty range raises error"""
        self.assertFalse(VersionRange(""))

    def test_invalid_range_no_brackets(self):
        """Test that invalid bracket syntax raises error"""
        with self.assertRaises(ValueError):
            VersionRange("1.0,2.0") # Missing brackets

    def test_range_with_maven_version_object(self):
        """Test that contains() works with MavenVersion objects"""
        vr = VersionRange("[1.0,2.0)")
        v = MavenVersion("1.5")
        self.assertTrue(vr.contains(v))

    def test_complex_multiple_ranges(self):
        """Test complex multiple range scenarios"""
        vr = VersionRange("(,1.0],[1.2,1.3],[1.5,)")
        self.assertTrue(vr.contains("0.5"))
        self.assertTrue(vr.contains("1.0"))
        self.assertFalse(vr.contains("1.1"))
        self.assertTrue(vr.contains("1.2"))
        self.assertTrue(vr.contains("1.3"))
        self.assertFalse(vr.contains("1.4"))
        self.assertTrue(vr.contains("1.5"))
        self.assertTrue(vr.contains("2.0"))

    def test_open_lower_bound(self):
        """Test open lower bound: (1.0,2.0]"""
        vr = VersionRange("(1.0,2.0]")
        self.assertFalse(vr.contains("1.0"))
        self.assertTrue(vr.contains("1.1"))
        self.assertTrue(vr.contains("2.0"))
        self.assertFalse(vr.contains("2.1"))

    def test_both_bounds_exclusive(self):
        """Test both bounds exclusive: (1.0,2.0)"""
        vr = VersionRange("(1.0,2.0)")
        self.assertFalse(vr.contains("1.0"))
        self.assertTrue(vr.contains("1.5"))
        self.assertFalse(vr.contains("2.0"))


class TestVersionSegment(unittest.TestCase):
    """Test cases for VersionSegment class"""

    def test_segment_contains_within_range(self):
        """Test that segment correctly identifies versions within range"""
        seg = VersionSegment(
            lower=MavenVersion("1.0"),
            upper=MavenVersion("2.0"),
            lower_inclusive=True,
            upper_inclusive=False
        )
        self.assertTrue(seg.contains(MavenVersion("1.5")))

    def test_segment_lower_bound_inclusive(self):
        """Test lower bound inclusivity"""
        seg = VersionSegment(
            lower=MavenVersion("1.0"),
            upper=None,
            lower_inclusive=True,
            upper_inclusive=True
        )
        self.assertTrue(seg.contains(MavenVersion("1.0")))

    def test_segment_lower_bound_exclusive(self):
        """Test lower bound exclusivity"""
        seg = VersionSegment(
            lower=MavenVersion("1.0"),
            upper=None,
            lower_inclusive=False,
            upper_inclusive=True
        )
        self.assertFalse(seg.contains(MavenVersion("1.0")))
        self.assertTrue(seg.contains(MavenVersion("1.1")))

    def test_segment_upper_bound_inclusive(self):
        """Test upper bound inclusivity"""
        seg = VersionSegment(
            lower=None,
            upper=MavenVersion("2.0"),
            lower_inclusive=True,
            upper_inclusive=True
        )
        self.assertTrue(seg.contains(MavenVersion("2.0")))

    def test_segment_upper_bound_exclusive(self):
        """Test upper bound exclusivity"""
        seg = VersionSegment(
            lower=None,
            upper=MavenVersion("2.0"),
            lower_inclusive=True,
            upper_inclusive=False
        )
        self.assertFalse(seg.contains(MavenVersion("2.0")))
        self.assertTrue(seg.contains(MavenVersion("1.9")))

    def test_segment_string_representation(self):
        """Test string representation of segment"""
        seg = VersionSegment(
            lower=MavenVersion("1.0"),
            upper=MavenVersion("2.0"),
            lower_inclusive=True,
            upper_inclusive=False
        )
        self.assertEqual(str(seg), "[1.0,2.0)")

    def test_segment_unbounded(self):
        """Test unbounded segment (all versions)"""
        seg = VersionSegment(
            lower=None,
            upper=None,
            lower_inclusive=True,
            upper_inclusive=True
        )
        self.assertTrue(seg.contains(MavenVersion("0.1")))
        self.assertTrue(seg.contains(MavenVersion("999.999")))


class TestEdgeCases(unittest.TestCase):
    """Test edge cases and special scenarios"""

    def test_version_with_underscore(self):
        """Test that underscores are treated like dots"""
        v1 = MavenVersion("1_0_0")
        v2 = MavenVersion("1.0.0")
        self.assertEqual(v1, v2)

    def test_version_with_mixed_separators(self):
        """Test version with mixed separators"""
        v = MavenVersion("1.0-beta_2")
        self.assertIsNotNone(v.tokens)

    def test_version_empty_tokens(self):
        """Test version with empty tokens (consecutive separators)"""
        v = MavenVersion("1..2")
        # Empty tokens should be replaced with "0"
        self.assertIsNotNone(v.tokens)

    def test_version_trailing_separator(self):
        """Test version with trailing separator"""
        v1 = MavenVersion("1.")
        v2 = MavenVersion("1")
        self.assertEqual(v1, v2)

    def test_version_leading_separator(self):
        """Test version with leading separator"""
        v = MavenVersion(".1")
        self.assertIsNotNone(v.tokens)

    def test_very_long_version(self):
        """Test very long version string"""
        v = MavenVersion("1.2.3.4.5.6.7.8.9.10")
        self.assertIsNotNone(v.tokens)

    def test_version_with_text_and_numbers(self):
        """Test version mixing text and numbers"""
        v1 = MavenVersion("1.0beta1")
        v2 = MavenVersion("1.0-beta-1")
        # These should be equivalent due to digit/char transition
        self.assertEqual(v1, v2)

    def test_version_comparison_chain(self):
        """Test that version comparisons are transitive"""
        v1 = MavenVersion("1.0")
        v2 = MavenVersion("1.5")
        v3 = MavenVersion("2.0")

        self.assertTrue(v1 < v2 < v3)
        self.assertTrue(v1 < v3)

    def test_version_with_only_qualifier(self):
        """Test version that is only a qualifier"""
        v = MavenVersion("alpha")
        self.assertIsNotNone(v.tokens)

    def test_multiple_consecutive_separators(self):
        """Test handling of multiple consecutive separators"""
        v = MavenVersion("1---2")
        self.assertIsNotNone(v.tokens)

    def test_version_range_whitespace(self):
        """Test that version range handles whitespace"""
        vr = VersionRange("[ 1.0 , 2.0 ]")
        self.assertTrue(vr.contains("1.5"))

    def test_comparison_operators_all(self):
        """Test all comparison operators"""
        v1 = MavenVersion("1.0")
        v2 = MavenVersion("2.0")

        self.assertTrue(v1 < v2)
        self.assertTrue(v1 <= v2)
        self.assertTrue(v2 > v1)
        self.assertTrue(v2 >= v1)
        self.assertTrue(v1 != v2)
        self.assertFalse(v1 == v2)

        v3 = MavenVersion("1.0")
        self.assertTrue(v1 <= v3)
        self.assertTrue(v1 >= v3)


class TestSpecificationExamples(unittest.TestCase):
    """
    Test all examples from the Maven specification document
    """

    def test_spec_example_1(self):
        """1 < 1.1 (number padding)"""
        self.assertTrue(MavenVersion("1") < MavenVersion("1.1"))

    def test_spec_example_2(self):
        """1-snapshot < 1 < 1-sp (qualifier padding)"""
        v1 = MavenVersion("1-snapshot")
        v2 = MavenVersion("1")
        v3 = MavenVersion("1-sp")
        self.assertTrue(v1 < v2 < v3)

    def test_spec_example_3(self):
        """1-foo2 < 1-foo10"""
        self.assertTrue(MavenVersion("1-foo2") < MavenVersion("1-foo10"))

    def test_spec_example_4(self):
        """1.foo = 1-foo < 1-1 < 1.1"""
        v1 = MavenVersion("1.foo")
        v2 = MavenVersion("1-foo")
        v3 = MavenVersion("1-1")
        v4 = MavenVersion("1.1")
        self.assertEqual(v1, v2)
        self.assertTrue(v2 < v3 < v4)

    def test_spec_example_5(self):
        """1.ga = 1-ga = 1-0 = 1.0 = 1"""
        versions = ["1.ga", "1-ga", "1-0", "1.0", "1"]
        for i in range(len(versions)):
            for j in range(i, len(versions)):
                self.assertEqual(MavenVersion(versions[i]), MavenVersion(versions[j]))

    def test_spec_example_6(self):
        """1-sp > 1-ga"""
        self.assertTrue(MavenVersion("1-sp") > MavenVersion("1-ga"))

    def test_spec_example_7(self):
        """1-sp.1 > 1-ga.1"""
        self.assertTrue(MavenVersion("1-sp.1") > MavenVersion("1-ga.1"))

    def test_spec_example_8(self):
        """1-sp-1 < 1-ga-1"""
        self.assertTrue(MavenVersion("1-sp-1") < MavenVersion("1-ga-1"))

    def test_spec_example_9(self):
        """1-a1 = 1-alpha-1"""
        self.assertEqual(MavenVersion("1-a1"), MavenVersion("1-alpha-1"))

    def test_spec_example_10(self):
        """1.0-alpha1 = 1.0-ALPHA1"""
        self.assertEqual(MavenVersion("1.0-alpha1"), MavenVersion("1.0-ALPHA1"))

    def test_spec_example_11(self):
        """1.7 > 1.K"""
        self.assertTrue(MavenVersion("1.7") > MavenVersion("1.K"))

    def test_spec_example_12(self):
        """5.zebra > 5.aardvark"""
        self.assertTrue(MavenVersion("5.zebra") > MavenVersion("5.aardvark"))

    def test_spec_example_13(self):
        """1.α > 1.b (Greek letter alpha)"""
        self.assertTrue(MavenVersion("1.α") > MavenVersion("1.b"))


if __name__ == "__main__":
    unittest.main()
